# React-Router

今天，我们一起来学习React-Router的源码。下面是我跟小S同学学习源码的过程。
大家可以参照这个思路，进行源码的学习。

我:
小S，今天我们来一起学习React-router-dom的源码吧
小S:
好呀！

我:
react-router的官网上，有基本使用
https://reacttraining.com/react-router/web/guides/basic-components
这里列出了常用的组件，以及常用的用法
小S:
好的， 继续

我:
先从这些组件的源码入手，那肯定第一个就是BrowserRouter，或者HashRouter
小S:
那应该怎么入手呢？
我:
首先，从github上，得到与文档版本对应的代码，先看路径结构
我:
路径结构这样的
小S:
接下来我一般就是找教程先简单过一遍，代码下下来然后吧node__modules 复制出来debugger
小S:
然后看不懂了就放弃
我:
不，你进入细节之前，要先搞清楚结构
小S:
恩啊， 不然怎么找代码
我:
你看到这个路径之后，第一步，应该猜一猜，这些文件夹都是干啥的，哪个是你需要的
小S:
script是build
小S:
websit是doc
我:
打开各个文件夹，会发现，package里面的东西，是我们想要的源码
我:
对
小S:
packges是功能
小S:
这个都差不多
小S:
支持平台
小S:
react-router是base吧
我:
我们肯定先从源码看起，因为这次读源码首先要学习的是实现，并不是构建
我:
那就从-dom开始呗
我:
继续
我:
奔着module去
小S:
直接master么
我:
嗯
小S:
为啥看module
我:
docs、tools、都是附属的啊
小S:
不应该先看package。json和rollup么
我:
核心代码，肯定是在模块里了
我:
我要先看看整个的结构
小S:
恩恩
我:
有个大致的印象
我:
打开modules就看到了我们刚刚文档中提及的几个组件了
小S:
tools是用到时候才看， docs我基本不会看的
我:
BrowserRouter
小S:
嗯哼
我:
那我要打开这个文件，开始看代码了
我:
我先不关注package.json这些配置文件
小S:
残暴
我:
因为我这次是要看原理，不是看整个源码如何build
我:
配置文件也是辅助而已
小S:
嗯啊
小S:
可是有时候还是很重要的
我:
那就用到了再说
小S:
至少看一下都用了什么和几个入口
我:
用到了什么也不需要在package.json中看
我:
因为我关注的那几个组件，用到啥会import的
我:
所以看源码，最重要的是，focus
我:
on
我:
你要有关注点
我:
有的源码，是非常庞大的
小S:
有道理
小S:
比如react
我:
你不可能一次就读懂他里面的东西，所以你要看很多次
我:
每次的关注点不同
小S:
恩啊
小S:
确实如此
我:
都揉到一起，会觉得非常乱，最后就放弃了
我:
而且，我们学习源码，也不一定要把源码中的每个特性都在一个项目中都用到，还是要分开学的
我:
那就先看BrowserRouter了
小S:
有道理
小S:
我就总忍不住乱看
我:
打开文件，看了一下，挺开心，代码没几行
小S:
然后一脸懵逼记不住， 看不懂
我:
哈哈，代码这么少，那肯定是有依赖组件了
我:
先看看依赖了哪些组件
我:
我这个源码，应该是旧版本的，跟你下载的不太一样
小S:
旧的好
小S:
真的
我:
不，我觉得新的好，旧的context使用起来非常不方便
我:
新的，用组件给封装了
我:
从依赖看，我最感兴趣的是 history和./Router
小S:
history是库啊
小S:
等等
小S:
我有点没跟上
我:
为啥我感兴趣这俩呢
小S:
你的兴趣点对
小S:
我以前看过源码相关教程， 了解一点history
我:
官网说了啊，那他做路由的时候，肯定根据这个来的
我:
所以，这个可能会作为读源码的预备知识，
我:
但是我先不管他，看看影响react-router的阅读不
我:
另外，之前说过，源码太少了，肯定依赖了其他的组件，看起来，就这个./Router最像了
我:
所以现在有两个todo:history和./router
小S:
具体的
小S:
我这个不太一样了
我:
我一会下一个最新的奥
我:
新版本的路径结构做了调整，shit
我:
好像没有，可能是我点错了，我再确认一下啊
我:
新版本是这个路径
小S:
en
我:
那关注的就是react-router这个包了
我:
其实刚才的那个./Router模块，内部也是直接导入导出的react-router包
小S:

小S:
好吧
我:
这个样子的
小S:
优秀
我:
我先不管刚才的todo，我把这个组件先看看，反正代码又不多
我:
我要把if(__DEV__)的分支删掉
我:
因为我现在要看的是最最核心的东西
我:
就俩东西了
1. history = createHistory(this.props); 
2. render() { 
 return <Router history={this.history} children={this.props.children} />; 
 } 
小S:
不至于
我:
切记过早的进入__DEV__,那个是方便开发用的，通常与核心的概念关系不大
我:
因为history我能猜出他是干啥用的，所以先放那了
小S:
不是啊
小S:
我感觉这一眼就能看懂的东西啊
我:
无非就是1. 监听路径改变 2. 改变路径
我:
所以现在BrowserRouter的任务，就是创建一个history对象，传给react-router的Router
小S:
这个时候
我:
嗯，你说
小S:
你会选择看router还是createHistory
我:
哈哈，这个时候，我其实想看一眼hashRouter
小S:
我也是
我:
以为import的一句话
我:
因为
小S:
估计也是hashRouter(this.props)
我:
所以我有理由怀疑，代码类似，就是导入了不同的函数
小S:
可能就是一个switch case
我:
不
我:
就是直接导入不同的包，在as一下
我:
还真是
我:
那我就把关注点，放在router上了
我:
因为1.history我猜出他是干啥了，跟浏览器路径有关
小S:
饿， 我说的就是router的history
小S:
猜的
我:
2. router里面用到它了，我等用到了，不知道做什么的时候，在去看history，这样行不行
小S:
恩啊
我:
回到这个路径
我:
去看react-router
小S:
为什么是他
我:
因为它导入包时，没加相对路径啊
我:
我就往上翻一翻呗，当然，我猜在配置文件中，可能会有相关配置
小S:
恩恩
小S:
人咧
我:
等会
我:
我正编呢，哈哈
小S:
我刚才是直接全局搜索history
我:
嗯...这样的结果可能会有点多，我猜
小S:
找到了package。json
小S:
发现react-router是一个包
我:
进这个路径，文件真tmd多，mmp的
小S:
而不是用了webpack alias类似的功能
我:
导入的是一个包，包下有index.js，我是不是应该先看这个js
我:
对，这个怀疑是有道理的
小S:
我是这个习惯，先看index是不是只做了inport
小S:
import
我:
但是其实我们在看recat-router-dom的时候，网上会有一些与react-router的比较的讨论，
小S:
没太注意
小S:
稀里糊涂
我:
所以，react-router是一个包，我是之前就知道的，但是，我并不确定他的代码在哪，如果找不到，我可能会从github上其他的位置找，或者从npm的官网找链接了
小S:
恩啊
我:
进index.js吧
我:
代码不多，分成production和else分支
我:
我会选择else分支
我:
但是发现一个问题啊，我艹
我:
当前路径下，没有cjs文件夹
小S:

我:
因为BrowserRouter导入的是一个包
我:
所以这个包，得是build之后的
小S:
这个时候就要看packge的script了
我:
嗯，可以的
小S:
我插个题外话
小S:
为啥
我:
那我看看吧，说实话，我对这个不是很熟
我:
什么为啥
小S:
为啥大家都不喜欢在github上提交build
我:
build是能生成的，为啥要提交啊
小S:
好吧
小S:
毕竟不像我这种穷逼， 只能用github.io做站点
小S:
只能提交build
我:
个人博客，够了
我:
我扫了一眼script，好像没发现我想要的东西
我:
就是那个cjs/react-router.js
小S:
"build": "del cjs esm umd && rollup -c",
我:
好吧，我先不找了
小S:
这不是有么
小S:
直接npm run build就可以
小S:
我猜的
我:
有道理
我:
我感觉略微跑偏了
小S:
rollup -c就是直接启用rolup.cinfig.js文件
我:
我要回到router本身上
小S:
和webpack一样config是默认配置
小S:
好好
小S:
继续
小S:
怎么回到router本身
我:
/react-router下，有一个router.js文件
小S:

我:
打开看那两行代码，就不是我要的东西啊
小S:
看modules
我:
它导出的，还是index.js编译之后的
小S:
下面的是build的
我:
对，看modules
我:
打开modules下的Router.js
小S:
要是我的话， 这个时候就跑偏了
我:
我也可能会跑偏
小S:
直接去看rollup了
我:
我之前就跑到history上去了
我:
但是后来想想，这样不太好
小S:
然后最后找到router
小S:
router.js
我:
从看源码角度说，直接找到modules下的Router.js很容易
我:
因为其他文件，一看就不是源码实现
小S:
en a
我:
现在打开它，一看，挺像啊，那先看看有多少行
小S:

我:
百十来行，有信心了，哈哈
小S:
然后这么少
小S:
的代码
小S:
第一反应看一下引入
我:
对
我:
但是你看，就仨吔
我:
啊不对，看错了
我:
五个
小S:
前三个忽略
我:
是的，
小S:
一看就没用
我:
我现在其实有点关注第五个了
小S:
我会看render
我:
因为如果他的名字叫做warn
我:
不着急
我:
是警告，是么
小S:
恩恩
小S:
搜一下
我:
警告通常都是开发版的东西，如果能排除，那就剩第四个依赖了
小S:
可能没用
我:
对，在__DEV__分支下，不看了，哈哈
小S:
再看dev里面的
我:
那就剩一个context.js了呗
小S:

小S:
过分
我:
我觉得我现在想扫一眼这个文件，如果内容不多，我就搞定他，如果多的话，那就先放那
小S:
向上找一找
小S:
老版本没用
小S:
恩恩
我:
老版本使用的是老的context
我:
是通过getContext这种
我:
新版本，用的是Provider和Consumer俩组件
小S:
恩恩
我:
我去看一看吧，哈哈
小S:
这一看就知道了
小S:
getChildContext这个是老版本的方法
我:
对的
我:
进RouterContext.js这个文件了
我:
我次奥了
小S:

小S:
狗
我:
十行不到，我把他搞定，我就可以专注Router.js那个文件了。那个文件里面，就是全部Router的核心了
我:
标准context用法，店长推荐的
我:
返回Router.js了哈

小S:
然后呢
小S:
看createContext么
我:
createContex就是最新的context用法，参加这个https://github.com/phgap/blogs/blob/master/react-router/00_20181102_context.md#api
我:
所以，需要有准备知识，哈哈
我:
简单点说，一个是提供者，一个是使用者
小S:
这个我知道啊

我:
看谁的原理
我:
context么
我:
不
我:
我这次看的是react-router
我:
别跑偏了
我:
回到router.js去了

我:
我感觉，这个时候，可以稍微进入细节一些了
我:
从第一个函数定义开始
我:
从名字看，是获取context的，返回一个对象，多余的不知道，先放着，往后看
小S:
嗯
小S:
先吃口饭不
我:
我先大概扫一眼组件都有哪些方法，除了组件，还有其他哪些代码
我:
12:20吧，好不
我:
你来得及么
我:
我正好12:20有事
我:
除了组件内容，组件下面有一个判断，看起来应该是处理老版本react的兼容问题的。那我就先不看了
我:
所以，重点就是在这个组件里面了。组件里面就是一些声明周期函数
我:
constructor、didMount
我:
这俩，是初始化的地方
小S:
嗯嗯
我:
一个一个看
我:
重点是那个判断
我:
if (!props.staticContext) {}的作用，是保证Router里面再嵌套Router时，使用的是相同的history
我:
里面是一个监听，监听history中的location的改变，也就是说，当路径改变时，这个history是统一监听的
小S:
嗯嗯
我:
那里面就调用了setState了呗，所以render就走了
小S:
嗯
我:
render非常简单，就是把context的value值，修改了一下
小S:
嗯啊
我:
我们知道，只要context的value一变化，对应的consumer的函数，就会被调用，是吧
小S:
嗯嗯
我:
那现在Router就结束了
我:
接下来，我们好奇的是，哪些组件使用了Consumer
小S:
找route
我:
根据React-router的使用，估计就是每个<Route>，都会监听这个context，然后进行路径匹配，决定是否要渲染自己的component指定的内容
我:
接下来，你应该知道怎么往下走了吧
我:
吃饭去吧
小S:

我:
刚好赶上今天我班考试，我还有时间，哈哈